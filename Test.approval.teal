#pragma version 10
#pragma typetrack false

// test.Test.__algopy_entrypoint_with_init() -> uint64:
main:
    intcblock 0 1 5 4
    bytecblock "asset" 0x61d7e762 "T1" "Test" "account_dispensed_to"
    txn ApplicationID
    bnz main_after_if_else@2
    // test.py:7
    // self.asset = Asset(0)
    bytec_0 // "asset"
    intc_0 // 0
    app_global_put

main_after_if_else@2:
    // test.py:5
    // class Test(ARC4Contract):
    txn NumAppArgs
    bz main_bare_routing@10
    pushbytess 0x75222f7b 0xaffd8799 0xad8872bf // method "create_asset(pay,bool)uint64", method "transfer_asset()void", method "user_request_unfreeze(account)void"
    bytec_1 // method "user_request_freeze(account)void"
    pushbytes 0xdfbc0ab6 // method "clawback_asset()void"
    txna ApplicationArgs 0
    match main_create_asset_route@5 main_transfer_asset_route@6 main_user_request_unfreeze_route@7 main_user_request_freeze_route@8 main_clawback_asset_route@9

main_after_if_else@12:
    // test.py:5
    // class Test(ARC4Contract):
    intc_0 // 0
    return

main_clawback_asset_route@9:
    // test.py:126
    // @abimethod
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub clawback_asset
    intc_1 // 1
    return

main_user_request_freeze_route@8:
    // test.py:107
    // @abimethod
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // test.py:5
    // class Test(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    txnas Accounts
    // test.py:107
    // @abimethod
    callsub user_request_freeze
    intc_1 // 1
    return

main_user_request_unfreeze_route@7:
    // test.py:87
    // @abimethod
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // test.py:5
    // class Test(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    txnas Accounts
    // test.py:87
    // @abimethod
    callsub user_request_unfreeze
    intc_1 // 1
    return

main_transfer_asset_route@6:
    // test.py:49
    // @abimethod
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub transfer_asset
    intc_1 // 1
    return

main_create_asset_route@5:
    // test.py:10
    // @abimethod
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // test.py:5
    // class Test(ARC4Contract):
    txn GroupIndex
    intc_1 // 1
    -
    dup
    gtxns TypeEnum
    intc_1 // pay
    ==
    assert // transaction type is pay
    txna ApplicationArgs 1
    intc_0 // 0
    getbit
    // test.py:10
    // @abimethod
    callsub create_asset
    itob
    pushbytes 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_bare_routing@10:
    // test.py:5
    // class Test(ARC4Contract):
    txn OnCompletion
    bnz main_after_if_else@12
    txn ApplicationID
    !
    assert // can only call when creating
    intc_1 // 1
    return


// test.Test.create_asset(mbr_payment: uint64, freeze: uint64) -> uint64:
create_asset:
    // test.py:10-15
    // @abimethod
    // def create_asset(
    //     self,
    //     mbr_payment: gtxn.PaymentTransaction,
    //     freeze: bool,
    // ) -> UInt64:
    proto 2 1
    // test.py:17
    // assert mbr_payment.amount == 100_000
    frame_dig -2
    gtxns Amount
    pushint 100000 // 100000
    ==
    assert
    // test.py:19
    // if freeze:
    frame_dig -1
    bz create_asset_else_body@3
    // test.py:20-30
    // create_asset = itxn.AssetConfig(
    //     asset_name='Test',
    //     unit_name='T1',
    //     manager=Global.current_application_address,
    //     reserve=Global.current_application_address,
    //     clawback=Global.current_application_address,
    //     freeze=Global.current_application_address,
    //     default_frozen=True,
    //     decimals=0,
    //     total=100,
    // ).submit()
    itxn_begin
    // test.py:23
    // manager=Global.current_application_address,
    global CurrentApplicationAddress
    // test.py:24-26
    // reserve=Global.current_application_address,
    // clawback=Global.current_application_address,
    // freeze=Global.current_application_address,
    dupn 3
    // test.py:29
    // total=100,
    pushint 100 // 100
    itxn_field ConfigAssetTotal
    // test.py:28
    // decimals=0,
    intc_0 // 0
    itxn_field ConfigAssetDecimals
    // test.py:27
    // default_frozen=True,
    intc_1 // 1
    itxn_field ConfigAssetDefaultFrozen
    itxn_field ConfigAssetFreeze
    itxn_field ConfigAssetClawback
    itxn_field ConfigAssetReserve
    itxn_field ConfigAssetManager
    // test.py:22
    // unit_name='T1',
    bytec_2 // "T1"
    itxn_field ConfigAssetUnitName
    // test.py:21
    // asset_name='Test',
    bytec_3 // "Test"
    itxn_field ConfigAssetName
    // test.py:20
    // create_asset = itxn.AssetConfig(
    pushint 3 // acfg
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    // test.py:20-30
    // create_asset = itxn.AssetConfig(
    //     asset_name='Test',
    //     unit_name='T1',
    //     manager=Global.current_application_address,
    //     reserve=Global.current_application_address,
    //     clawback=Global.current_application_address,
    //     freeze=Global.current_application_address,
    //     default_frozen=True,
    //     decimals=0,
    //     total=100,
    // ).submit()
    itxn_submit
    itxn CreatedAssetID

create_asset_after_if_else@5:
    // test.py:45
    // self.asset = create_asset.created_asset
    bytec_0 // "asset"
    dig 1
    app_global_put
    // test.py:47
    // return create_asset.created_asset.id
    retsub

create_asset_else_body@3:
    // test.py:35-43
    // create_asset = itxn.AssetConfig(
    //     asset_name='Test',
    //     unit_name='T1',
    //     manager=Global.current_application_address,
    //     reserve=Global.current_application_address,
    //     clawback=Global.current_application_address,
    //     decimals=0,
    //     total=100,
    // ).submit()
    itxn_begin
    // test.py:38
    // manager=Global.current_application_address,
    global CurrentApplicationAddress
    // test.py:39-40
    // reserve=Global.current_application_address,
    // clawback=Global.current_application_address,
    dupn 2
    // test.py:42
    // total=100,
    pushint 100 // 100
    itxn_field ConfigAssetTotal
    // test.py:41
    // decimals=0,
    intc_0 // 0
    itxn_field ConfigAssetDecimals
    itxn_field ConfigAssetClawback
    itxn_field ConfigAssetReserve
    itxn_field ConfigAssetManager
    // test.py:37
    // unit_name='T1',
    bytec_2 // "T1"
    itxn_field ConfigAssetUnitName
    // test.py:36
    // asset_name='Test',
    bytec_3 // "Test"
    itxn_field ConfigAssetName
    // test.py:35
    // create_asset = itxn.AssetConfig(
    pushint 3 // acfg
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    // test.py:35-43
    // create_asset = itxn.AssetConfig(
    //     asset_name='Test',
    //     unit_name='T1',
    //     manager=Global.current_application_address,
    //     reserve=Global.current_application_address,
    //     clawback=Global.current_application_address,
    //     decimals=0,
    //     total=100,
    // ).submit()
    itxn_submit
    itxn CreatedAssetID
    b create_asset_after_if_else@5


// test.Test.transfer_asset() -> void:
transfer_asset:
    // test.py:54
    // if self.asset.default_frozen == True:
    intc_0 // 0
    bytec_0 // "asset"
    app_global_get_ex
    assert // check self.asset exists
    asset_params_get AssetDefaultFrozen
    assert // asset exists
    intc_1 // 1
    ==
    bz transfer_asset_else_body@5
    // test.py:59-63
    // itxn.AssetFreeze(
    //     freeze_account=Txn.sender,
    //     freeze_asset=self.asset,
    //     frozen=False,
    // ).submit()
    itxn_begin
    // test.py:60
    // freeze_account=Txn.sender,
    txn Sender
    // test.py:61
    // freeze_asset=self.asset,
    intc_0 // 0
    bytec_0 // "asset"
    app_global_get_ex
    assert // check self.asset exists
    // test.py:62
    // frozen=False,
    intc_0 // 0
    itxn_field FreezeAssetFrozen
    itxn_field FreezeAsset
    itxn_field FreezeAssetAccount
    // test.py:59
    // itxn.AssetFreeze(
    intc_2 // afrz
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    // test.py:59-63
    // itxn.AssetFreeze(
    //     freeze_account=Txn.sender,
    //     freeze_asset=self.asset,
    //     frozen=False,
    // ).submit()
    itxn_submit
    // test.py:65-69
    // itxn.AssetTransfer(
    //     asset_receiver=Txn.sender,
    //     asset_amount=1,
    //     xfer_asset=self.asset
    // ).submit()
    itxn_begin
    // test.py:66
    // asset_receiver=Txn.sender,
    txn Sender
    // test.py:68
    // xfer_asset=self.asset
    intc_0 // 0
    bytec_0 // "asset"
    app_global_get_ex
    assert // check self.asset exists
    itxn_field XferAsset
    // test.py:67
    // asset_amount=1,
    intc_1 // 1
    itxn_field AssetAmount
    itxn_field AssetReceiver
    // test.py:65
    // itxn.AssetTransfer(
    intc_3 // axfer
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    // test.py:65-69
    // itxn.AssetTransfer(
    //     asset_receiver=Txn.sender,
    //     asset_amount=1,
    //     xfer_asset=self.asset
    // ).submit()
    itxn_submit
    // test.py:71-75
    // itxn.AssetFreeze(
    //     freeze_account=Txn.sender,
    //     freeze_asset=self.asset,
    //     frozen=True,
    // ).submit()
    itxn_begin
    // test.py:72
    // freeze_account=Txn.sender,
    txn Sender
    // test.py:73
    // freeze_asset=self.asset,
    intc_0 // 0
    bytec_0 // "asset"
    app_global_get_ex
    assert // check self.asset exists
    // test.py:74
    // frozen=True,
    intc_1 // 1
    itxn_field FreezeAssetFrozen
    itxn_field FreezeAsset
    itxn_field FreezeAssetAccount
    // test.py:71
    // itxn.AssetFreeze(
    intc_2 // afrz
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    // test.py:71-75
    // itxn.AssetFreeze(
    //     freeze_account=Txn.sender,
    //     freeze_asset=self.asset,
    //     frozen=True,
    // ).submit()
    itxn_submit

transfer_asset_after_if_else@7:
    // test.py:85
    // self.account_dispensed_to = Txn.sender
    bytec 4 // "account_dispensed_to"
    txn Sender
    app_global_put
    retsub

transfer_asset_else_body@5:
    // test.py:79-83
    // itxn.AssetTransfer(
    //     asset_receiver=Txn.sender,
    //     asset_amount=1,
    //     xfer_asset=self.asset
    // ).submit()
    itxn_begin
    // test.py:80
    // asset_receiver=Txn.sender,
    txn Sender
    // test.py:82
    // xfer_asset=self.asset
    intc_0 // 0
    bytec_0 // "asset"
    app_global_get_ex
    assert // check self.asset exists
    itxn_field XferAsset
    // test.py:81
    // asset_amount=1,
    intc_1 // 1
    itxn_field AssetAmount
    itxn_field AssetReceiver
    // test.py:79
    // itxn.AssetTransfer(
    intc_3 // axfer
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    // test.py:79-83
    // itxn.AssetTransfer(
    //     asset_receiver=Txn.sender,
    //     asset_amount=1,
    //     xfer_asset=self.asset
    // ).submit()
    itxn_submit
    b transfer_asset_after_if_else@7


// test.Test.user_request_unfreeze(receiver: bytes) -> void:
user_request_unfreeze:
    // test.py:87-91
    // @abimethod
    // def user_request_unfreeze(
    //     self,
    //     receiver: Account
    // ) -> None:
    proto 1 0
    // test.py:93
    // txn_index = Txn.group_index
    txn GroupIndex
    // test.py:94
    // assert gtxn.ApplicationCallTransaction(txn_index + 2).app_args(0) == arc4_signature("user_request_freeze(account)void"), "User did not request freeze after unfreeze and transfer"
    pushint 2 // 2
    +
    dup
    gtxns TypeEnum
    pushint 6 // appl
    ==
    assert // transaction type is appl
    intc_0 // 0
    gtxnsas ApplicationArgs
    bytec_1 // method "user_request_freeze(account)void"
    ==
    assert // User did not request freeze after unfreeze and transfer
    // test.py:95-99
    // itxn.AssetFreeze(
    //     freeze_account=Txn.sender,
    //     freeze_asset=self.asset,
    //     frozen=False,
    // ).submit()
    itxn_begin
    // test.py:96
    // freeze_account=Txn.sender,
    txn Sender
    // test.py:97
    // freeze_asset=self.asset,
    intc_0 // 0
    bytec_0 // "asset"
    app_global_get_ex
    assert // check self.asset exists
    // test.py:98
    // frozen=False,
    intc_0 // 0
    itxn_field FreezeAssetFrozen
    itxn_field FreezeAsset
    itxn_field FreezeAssetAccount
    // test.py:95
    // itxn.AssetFreeze(
    intc_2 // afrz
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    // test.py:95-99
    // itxn.AssetFreeze(
    //     freeze_account=Txn.sender,
    //     freeze_asset=self.asset,
    //     frozen=False,
    // ).submit()
    itxn_submit
    // test.py:101-105
    // itxn.AssetFreeze(
    //     freeze_account=receiver,
    //     freeze_asset=self.asset,
    //     frozen=False,
    // ).submit()
    itxn_begin
    // test.py:103
    // freeze_asset=self.asset,
    intc_0 // 0
    bytec_0 // "asset"
    app_global_get_ex
    assert // check self.asset exists
    // test.py:104
    // frozen=False,
    intc_0 // 0
    itxn_field FreezeAssetFrozen
    itxn_field FreezeAsset
    frame_dig -1
    itxn_field FreezeAssetAccount
    // test.py:101
    // itxn.AssetFreeze(
    intc_2 // afrz
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    // test.py:101-105
    // itxn.AssetFreeze(
    //     freeze_account=receiver,
    //     freeze_asset=self.asset,
    //     frozen=False,
    // ).submit()
    itxn_submit
    retsub


// test.Test.user_request_freeze(receiver: bytes) -> void:
user_request_freeze:
    // test.py:107-111
    // @abimethod
    // def user_request_freeze(
    //     self,
    //     receiver: Account
    // ) -> None:
    proto 1 0
    // test.py:113-117
    // itxn.AssetFreeze(
    //     freeze_account=Txn.sender,
    //     freeze_asset=self.asset,
    //     frozen=True,
    // ).submit()
    itxn_begin
    // test.py:114
    // freeze_account=Txn.sender,
    txn Sender
    // test.py:115
    // freeze_asset=self.asset,
    intc_0 // 0
    bytec_0 // "asset"
    app_global_get_ex
    assert // check self.asset exists
    // test.py:116
    // frozen=True,
    intc_1 // 1
    itxn_field FreezeAssetFrozen
    itxn_field FreezeAsset
    itxn_field FreezeAssetAccount
    // test.py:113
    // itxn.AssetFreeze(
    intc_2 // afrz
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    // test.py:113-117
    // itxn.AssetFreeze(
    //     freeze_account=Txn.sender,
    //     freeze_asset=self.asset,
    //     frozen=True,
    // ).submit()
    itxn_submit
    // test.py:119-123
    // itxn.AssetFreeze(
    //     freeze_account=receiver,
    //     freeze_asset=self.asset,
    //     frozen=True,
    // ).submit()
    itxn_begin
    // test.py:121
    // freeze_asset=self.asset,
    intc_0 // 0
    bytec_0 // "asset"
    app_global_get_ex
    assert // check self.asset exists
    // test.py:122
    // frozen=True,
    intc_1 // 1
    itxn_field FreezeAssetFrozen
    itxn_field FreezeAsset
    frame_dig -1
    itxn_field FreezeAssetAccount
    // test.py:119
    // itxn.AssetFreeze(
    intc_2 // afrz
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    // test.py:119-123
    // itxn.AssetFreeze(
    //     freeze_account=receiver,
    //     freeze_asset=self.asset,
    //     frozen=True,
    // ).submit()
    itxn_submit
    retsub


// test.Test.clawback_asset() -> void:
clawback_asset:
    // test.py:131-137
    // itxn.AssetTransfer(
    //     xfer_asset=self.asset,
    //     asset_receiver=Global.current_application_address,
    //     sender=Global.current_application_address,
    //     asset_sender=self.account_dispensed_to,
    //     asset_amount=1
    // ).submit()
    itxn_begin
    // test.py:132
    // xfer_asset=self.asset,
    intc_0 // 0
    bytec_0 // "asset"
    app_global_get_ex
    assert // check self.asset exists
    // test.py:133
    // asset_receiver=Global.current_application_address,
    global CurrentApplicationAddress
    // test.py:134
    // sender=Global.current_application_address,
    dup
    // test.py:135
    // asset_sender=self.account_dispensed_to,
    intc_0 // 0
    bytec 4 // "account_dispensed_to"
    app_global_get_ex
    assert // check self.account_dispensed_to exists
    // test.py:136
    // asset_amount=1
    intc_1 // 1
    itxn_field AssetAmount
    itxn_field AssetSender
    itxn_field Sender
    itxn_field AssetReceiver
    itxn_field XferAsset
    // test.py:131
    // itxn.AssetTransfer(
    intc_3 // axfer
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    // test.py:131-137
    // itxn.AssetTransfer(
    //     xfer_asset=self.asset,
    //     asset_receiver=Global.current_application_address,
    //     sender=Global.current_application_address,
    //     asset_sender=self.account_dispensed_to,
    //     asset_amount=1
    // ).submit()
    itxn_submit
    retsub
