{
    "name": "Test",
    "structs": {},
    "methods": [
        {
            "name": "create_asset",
            "args": [
                {
                    "type": "pay",
                    "name": "mbr_payment"
                },
                {
                    "type": "bool",
                    "name": "freeze"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "transfer_asset",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "user_request_unfreeze",
            "args": [
                {
                    "type": "account",
                    "name": "receiver"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "user_request_freeze",
            "args": [
                {
                    "type": "account",
                    "name": "receiver"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "clawback_asset",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 1,
                "bytes": 1
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {
                "asset": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "YXNzZXQ="
                },
                "account_dispensed_to": {
                    "keyType": "AVMString",
                    "valueType": "AVMBytes",
                    "key": "YWNjb3VudF9kaXNwZW5zZWRfdG8="
                }
            },
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        106,
                        118,
                        136,
                        154,
                        166
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        435
                    ],
                    "errorMessage": "User did not request freeze after unfreeze and transfer"
                },
                {
                    "pc": [
                        316
                    ],
                    "errorMessage": "asset exists"
                },
                {
                    "pc": [
                        208
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        109,
                        121,
                        139,
                        157,
                        169
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        537
                    ],
                    "errorMessage": "check self.account_dispensed_to exists"
                },
                {
                    "pc": [
                        313,
                        328,
                        349,
                        370,
                        397,
                        442,
                        461,
                        488,
                        507,
                        529
                    ],
                    "errorMessage": "check self.asset exists"
                },
                {
                    "pc": [
                        429
                    ],
                    "errorMessage": "transaction type is appl"
                },
                {
                    "pc": [
                        179
                    ],
                    "errorMessage": "transaction type is pay"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "byteCode": {
        "approval": "CiAEAAEFBCYFBWFzc2V0BGHX52ICVDEEVGVzdBRhY2NvdW50X2Rpc3BlbnNlZF90bzEYQAADKCJnMRtBAIqCAwR1Ii97BK/9h5kErYhyvymABN+8CrY2GgCOBQA+ADIAIAAOAAIiQzEZFEQxGESIAZwjQzEZFEQxGEQ2GgEXwByIAVwjQzEZFEQxGEQ2GgEXwByIAQojQzEZFEQxGESIAJUjQzEZFEQxGEQxFiMJSTgQIxJENhoBIlOIABcWgAQVH3x1TFCwI0MxGUD/mDEYFEQjQ4oCAYv+OAiBoI0GEkSL/0EALLEyCkcDgWSyIiKyIyOyJLIrsiyyKrIpKrIlK7ImgQOyECKyAbO0PChLAWeJsTIKRwKBZLIiIrIjsiyyKrIpKrIlK7ImgQOyECKyAbO0PEL/1iIoZURxAkQjEkEARbExACIoZUQisi+yLbIuJLIQIrIBs7ExACIoZUSyESOyErIUJbIQIrIBs7ExACIoZUQjsi+yLbIuJLIQIrIBsycEMQBnibExACIoZUSyESOyErIUJbIQIrIBs0L/4ooBADEWgQIISTgQgQYSRCLCGikSRLExACIoZUQisi+yLbIuJLIQIrIBs7EiKGVEIrIvsi2L/7IuJLIQIrIBs4mKAQCxMQAiKGVEI7Ivsi2yLiSyECKyAbOxIihlRCOyL7Iti/+yLiSyECKyAbOJsSIoZUQyCkkiJwRlRCOyErITsgCyFLIRJbIQIrIBs4k=",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 4,
            "minor": 4,
            "patch": 2
        }
    },
    "events": [],
    "templateVariables": {}
}